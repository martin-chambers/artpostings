@model ArtPostings.Models.ItemPostingViewModel
<script>
    function closeEdit(event) {
        event.preventDefault();
        $.ajax({
            url: '@Url.Action("Reload")', // controller-agnostic: this might call either the Archive or Home versions of 'Reload'
            type: 'GET',
            cache: false,
            success: function (htmlstring) {
                // need to replace content at a fairly high level to ensure old postings are cleared out of the view
                $('#listpad').html(htmlstring);
                $('#listpad').show();
            },
            error: function (request, status, error) {
                alert(error);
            }
        });
    };

    function getFirstElementByName(element_name) {
        var elements = document.getElementsByName(element_name);
        if (elements.length) {
            return elements[0];
        } else {
            return undefined;
        }
    };
    var token = (function () {
        var returnVal = getFirstElementByName('__RequestVerificationToken').value;
        return returnVal;
    })();
    function checkmarksave(event) {
        var obj = @ArtPostings.Models.JavaScriptConvert.SerializeObject(Model.ItemPosting);
        var url = '@Url.Action("Edit")';
        var edit = false;
        event.preventDefault();
        var itemposting = (function () {
            var title = obj.title;
            var desc = $("#ItemPosting_Description").val();
            var id = obj.id;
            var filepath = obj.filePath;
            var filename = obj.fileName;
            var shortname = obj.shortName;
            var header = $("#ItemPosting_Header").val();
            var size = $("#ItemPosting_Size").val();
            var price = $("#ItemPosting_Price").val();
            return {
                Id: id,
                FilePath: filepath,
                FileName: filename,
                Title: title,
                ShortName: shortname,
                Header: header,
                Description: desc,
                Size: size,
                Price: price
            };
        })();
        var payload = (function () {
            var rv = {posting: { Editing: edit, ItemPosting: itemposting }, __RequestVerificationToken: token };
            return rv;
        })();
        $.ajax({
            url: url, // controller-agnostic: this might call either the Archive or Home versions of 'Edit'
            type: 'POST',
            data: payload,
            dataType: "json",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            error: function (request, status, error) {
                alert(request.responseText);
            },
            success: function () {
                closeEdit(event);
            }
        })
        // the following prevents default behaviour following an onclick event. It duplicates effect of
        // event.preventdefault above, so not particularly necessary
        return false;
    }
</script>
<td class="picturecell">
    <a class='picturelink' href=@Model.ItemPosting.FilePath rel='lightbox' title=@Model.ItemPosting.Title>
        <img alt=@Model.ItemPosting.ShortName width="120" title=@Model.ItemPosting.ShortName src=@Model.ItemPosting.FilePath />
    </a>
</td>
<td class="itemtext">
    <div class="itemheader">
        <strong>
            @Html.EditorFor(m => m.ItemPosting.Header)
        </strong>
        <div class="itemaction">
            <a class="icon" href="#">
                <span class="ion-close" onclick="closeEdit(event)" data-pack="default" data-tags="talk" data-toggle="tooltip" title="Cancel changes"></span>
            </a>
            <a class="icon" href="#">
                <span class="ion-checkmark" onclick="checkmarksave(event)" data-pack="default" data-tags="talk" data-toggle="tooltip" title="Done"></span>
            </a>
        </div>
    </div>
    <div class="itemdescedit">@Html.EditorFor(m => m.ItemPosting.Description, new { htmlAttributes = new { @class = "description" } })</div><br /><br />
    <div class="itemfooter">
        <span> @Html.EditorFor(m => m.ItemPosting.Price)</span><span> | Size :@Html.EditorFor(m => m.ItemPosting.Size)</span>
    </div>
</td>

